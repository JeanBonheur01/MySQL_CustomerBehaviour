```sql
--0 Creation of the new database and tables: 

CREATE DATABASE wok_sushi;

USE wok_sushi;

CREATE TABLE sales(
	customer_id VARCHAR(1),
	order_date DATE,
	product_id INTEGER
);

INSERT INTO sales
	(customer_id, order_date, product_id)
VALUES
	('A', '2024-04-14', 1),
	('A', '2024-04-14', 2),
	('A', '2024-04-20', 2),
	('A', '2024-04-21', 3),
	('A', '2024-04-22', 3),
	('A', '2024-04-22', 3),
	('B', '2024-04-14', 2),
	('B', '2024-04-15', 2),
	('B', '2024-04-17', 1),
	('B', '2024-04-22', 1),
	('B', '2024-04-18', 3),
	('B', '2024-05-01', 3),
	('C', '2024-04-14', 3),
	('C', '2024-04-14', 3),
	('C', '2024-04-20', 3);

CREATE TABLE menu(
	product_id INTEGER,
	product_name VARCHAR(5),
	price INTEGER
);

INSERT INTO menu
	(product_id, product_name, price)
VALUES
	(1, 'sushi', 10),
    (2, 'curry', 15),
    (3, 'ramen', 12);

CREATE TABLE customers(
	customer_id VARCHAR(1),
	join_date DATE
);

-- Still works without specifying the column names explicitly
INSERT INTO customers
	(customer_id, join_date)
VALUES
	('A', '2024-04-20'),
    ('B', '2024-04-25');

--1. What is the total amount each customer spent at the restaurant? 

select 
	s.customer_id, sum(m.price) as total_spend
from 
	sales s
join menu m	
on 	m.product_id = s.product_id
group by
	s.customer_id; 

--2. How many days has each customer visited the restaurant? 

select 
	customer_id, count(distinct s.order_date) as days_visited
from 
	sales s
group by 
	customer_id; 

--3. What was the first item from the menu purchased by each customer? 

with customer_first_purchase as (
	select 
		s.customer_id, min(s.order_date) as first_purchase_date
	from 
		sales s
	group by 
		s.customer_id)
select 
	cfp.customer_id, cfp.first_purchase_date, m.product_name
from 
	customer_first_purchase cfp
join sales s on s.customer_id = cfp.customer_id
and cfp.first_purchase_date = s.order_date
join menu m on m.product_id = s.product_id; 

--4. What is the most purchased item on the menu and how many times was it purchased by all customers? 

select 
	m.product_name, count(*) as total_purchased
from 
	sales s
join menu m on s.product_id = m.product_id
group by 
	m.product_name
order by 
	total_purchased desc limit 1; 

--5. Which item was the most popular for each customer? 

with customer_popularity as (
	select 
		s.customer_id, m.product_name, count(*) as purchase_count, 
		dense_rank() over(partition by s.customer_id order by count(*) desc) as rank_I
	from 
		sales s
	join menu m on s.product_id = m.product_id
	group by 
		s.customer_id, m.product_name) 
select
	cp.customer_id, cp.product_name, cp.purchase_count
from
	customer_popularity cp
where rank_I = 1;  

--6. Which item was purchased first by the customer after they became a member/customer? 

with first_purchase_after_membership as (
	select s.customer_id, min(s.order_date) as first_purchase_date
	from sales s
	join customers cu on s.customer_id = cu.customer_id
	where s.order_date >= cu.join_date
	group by s.customer_id
)
select fpam.customer_id, m.product_name
from first_purchase_after_membership fpam
join sales s on s.customer_id = fpam.customer_id
and fpam.first_purchase_date = s.order_date
join menu m on s.product_id = m.product_id; 

--7. Which item was purchased just before the customer became a menber? 

with last_purchase_before_membership as (
	select 
		s.customer_id, max(s.order_date) as last_purchase_date
	from sales s
	join customers cu on s.customer_id = cu.customer_id
	where s.order_date < cu.join_date
	group by s.customer_id
)
select lpbm.customer_id, m.product_name 
from last_purchase_before_membership lpbm
join sales s on s.customer_id = lpbm.customer_id
and lpbm.last_purchase_date = s.order_date
join menu m on m.product_id = s.product_id; 

--8. What are the total items and amout spent for each customer before they become members? 

select 
	s.customer_id, count(*) as total_items, sum(m.price) as total_spent
from
	sales s
join menu m on s.product_id = m.product_id
join customers cu on s.customer_id = cu.customer_id
where s.order_date < cu.join_date
group by s.customer_id; 

--9. If each $1 spent equates to 10 points and sushi has a 2x multiplier - how many points would each customer have? 

select s.customer_id, sum(
	case 
		when m.product_name = 'sushi' then m.price*20
        else m.price*10 end) as total_points
from sales s
join menu m on s.product_id = m.product_id
group by s.customer_id; 

--10. In the first week after a customer joins the program (including their join data) they earn 2x points on all items, not just sushi, how many points do customer A and B have at the end of April?

select s.customer_id, sum(
	case	
		when s.order_date between cu.join_date
        and DATE_ADD(cu.join_date, interval 7 day)
        then m.price*20
        when m.product_name = 'sushi' then m.price*20
        else m.price*10 end) as total_points
from sales s
join menu m on s.product_id = m.product_id
left join customers cu on s.customer_id = cu.customer_id
where s.customer_id in ('A', 'B') and s.order_date <= '2024-04-29'
group by s.customer_id; 

--11. The company also requires the ranking of products. The ranking of non member purchases is not needed, it should be NULL for customers who are not yet part of the loyalty program.  

with customers_data as (
	select 
		s.customer_id, s.order_date, m.product_name, m.price, 
		case when s.order_date < cu.join_date then 'N'
			when s.order_date >= cu.join_date then 'Y'
			else 'N' end as member
	from sales s
	left join customers cu on  s.customer_id = cu.customer_id
	join menu m on s.product_id = m.product_id)
select *, 
case when member= 'N' then null
else rank() over(partition by customer_id, member order by order_date) end as ranking 
from customers_data
order by customer_id, order_date; 
```
